{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\nimport combineHooksSlotProps from '../utils/combineHooksSlotProps';\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: \"\".concat(listboxId, \"_\").concat(index)\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _getOptionByValue;\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n  const getSelectTriggerProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      ref: mergedListRootRef,\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return combinedProps(otherHandlers);\n  };\n  const getListboxProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault // to prevent the button from losing focus when interacting with the listbox\n    });\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport default useSelect;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","useButton","SelectActionTypes","useList","defaultOptionStringifier","useCompoundParent","selectReducer","combineHooksSlotProps","preventDefault","event","useSelect","props","areOptionsEqual","buttonRef","buttonRefProp","defaultOpen","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","onChange","onHighlightChange","onOpenChange","open","openProp","options","optionsParam","getOptionAsString","value","valueProp","useRef","handleButtonRef","undefined","useMemo","subitems","contextValue","compoundComponentContextValue","Map","map","option","index","label","ref","createRef","id","concat","handleListboxRef","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","rootRef","mergedButtonRef","optionValues","Array","from","keys","getOptionByValue","useCallback","valueToGet","similarValue","find","optionValue","get","isItemDisabled","valueToCheck","_option$disabled","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","field","fieldValue","type","_buttonRef$current","current","focus","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","itemComparer","onStateChange","reducerActionContext","items","getItemAsString","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListRootRef","createHandleButtonClick","otherHandlers","_otherHandlers$onClic","onClick","call","defaultMuiPrevented","action","buttonClick","_getOptionByValue","optionRef","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getOptionMetadata","getSelectTriggerProps","arguments","length","role","getButtonProps","listboxAndButtonProps","combinedProps","getListboxProps","onMouseDown","useDebugValue","selectValue"],"sources":["/home/ali/weather-app/node_modules/@mui/base/useSelect/useSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\nimport combineHooksSlotProps from '../utils/combineHooksSlotProps';\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _getOptionByValue;\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      ref: mergedListRootRef,\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = (otherHandlers = {}) => {\n    const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return combinedProps(otherHandlers);\n  };\n  const getListboxProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault // to prevent the button from losing focus when interacting with the listbox\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport default useSelect;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}